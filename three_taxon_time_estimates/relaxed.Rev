data <- readDiscreteCharacterData("three_taxon_data/three_taxon_" + z + "/concatenated.nexus")
tree <- readTrees("three_taxon_data/three_taxon_" + z + "/three_taxon.tre")[1] 

n_taxa <- data.ntaxa()
taxa <- data.taxa()
n_branches <- n_taxa*2 - 2

mvi = 0
mni = 0

#############################################################################################################

er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)
moves[++mvi] = mvDirichletSimplex(er, weight=3.0, tune=true)
moves[++mvi] = mvBetaSimplex(er, weight=3.0, tune=true)

pi_prior <- v(1,1,1,1)
pi ~ dnDirichlet(pi_prior)
moves[++mvi] = mvDirichletSimplex(pi, weight=3.0, tune=true)
moves[++mvi] = mvBetaSimplex(pi, weight=3.0, tune=true)
Q := fnGTR(er,pi)

alpha_prior_mean <- ln(5.0)
alpha_prior_sd <- 0.587405
alpha ~ dnLognormal( alpha_prior_mean, alpha_prior_sd )
gamma_rates := fnDiscretizeGamma( alpha, alpha, 4 )
moves[++mvi] = mvScale(alpha, weight=3.0, tune=true)

pinvar ~ dnBeta(1,1)
moves[++mvi] = mvSlide(pinvar, weight=5.0, tune=true)
moves[++mvi] = mvScale(pinvar, weight=5.0, tune=true)

#############################################################################################################

root_time <- tree.rootAge()
rho <- 1

speciation ~ dnExponential(10)
moves[++mvi] = mvScale(speciation,lambda=1,weight=3.0, tune=true)
moves[++mvi] = mvScale(speciation,lambda=0.1,weight=3.0, tune=true)
moves[++mvi] = mvScale(speciation,lambda=0.01,weight=3.0, tune=true)

timetree ~ dnBDP(lambda=speciation, mu=0, rho=rho, rootAge=root_time, samplingStrategy="uniform", condition="nTaxa", taxa=taxa)
timetree.setValue(tree)

moves[++mvi] = mvSubtreeScale(timetree, weight=5.0)
moves[++mvi] = mvNodeTimeSlideUniform(timetree, weight=15.0)
moves[++mvi] = mvTreeScale(tree=timetree, delta=1.0, weight=3.0)
moves[++mvi] = mvTreeScale(tree=timetree, delta=0.1, weight=3.0)
moves[++mvi] = mvTreeScale(tree=timetree, delta=0.01, weight=3.0)

#############################################################################################################

clock_mean ~ dnUnif(1E-6, 10)
moves[++mvi] = mvScale(clock_mean, lambda = 1, weight = 3, tune=true)
moves[++mvi] = mvScale(clock_mean, lambda = 0.1, weight = 3, tune=true)
moves[++mvi] = mvScale(clock_mean, lambda = 0.01, weight = 3, tune=true)

for(i in 1:n_branches){
branch_rates[i] ~ dnLnorm(ln(clock_mean), 0.587405)
moves[++mvi] = mvScale(branch_rates[i], lambda = 1, weight=2.0, tune=true)
}

moves[++mvi] = mvVectorScale(branch_rates,lambda=1.0,weight=2.0, tune=true) 
moves[++mvi] = mvVectorSingleElementScale(branch_rates,lambda=30.0,weight=1.0, tune=true)

#############################################################################################################

seq ~ dnPhyloCTMC(tree=timetree, Q=Q, siteRates=gamma_rates, pInv=pinvar, branchRates=branch_rates, type="DNA")
seq.clamp(data)

#############################################################################################################

mymodel = model(timetree)

monitors[++mni] = mnModel(filename="OUTPUT_relaxed/three_taxon_" + z + "/model.log", printgen=10, separator = TAB)
monitors[++mni] = mnFile(filename="OUTPUT_relaxed/three_taxon_" + z + "/sampled.trees", printgen=10, timetree)
monitors[++mni] = mnScreen(printgen=10)

mymcmc = mcmc(mymodel, monitors, moves, nruns=2)
mymcmc.burnin(generations = 2500, tuningInterval = 100)
mymcmc.run(generations=50000)

tt = readTreeTrace("OUTPUT_relaxed/three_taxon_" + z + "/sampled.trees", "clock")
tt.summarize()
mapTree(tt, "OUTPUT_relaxed/three_taxon_" + z + "/sampled.trees")

clear(monitors, moves, n_taxa, taxa, n_branches, Q, rho, root_time, extinction, speciation, timetree, branch_rates, seq)
